extends ./base.jade

block body 
   .page.spash

   span(class="title") 
      h1 Health of TestGig

   div(class="sidebar")
      ul    
       
   span(class="display")


   script(src="/public/d3/d3.v3.js").
   script(type="text/javascript").
       var w = 800,
           h = 500,
           linkDist = w/3,
           rad = w/30,
           strokeWidth = rad/6;
           
       var svg = d3.select(".display")
                   .append("svg")
                   .attr("width",w)
                   .attr("height",h);
                   
       //get the sidebar for display purposes                    
       var sidebar = d3.select(".sidebar");
       
       //placeholder function 
       function nodeFn(d){return d.data;}
       
       //adds the source and target to the edge data
       function edgeFn(d){
           if (d.source){
            d.data.source = d.source.data.name;
           }
           if (d.source){
            d.data.target = d.target.data.name;
           }
           return d.data;};
           
       //helper scale to map node type to color    
       var nodeMap = d3.scale.ordinal()
                         .domain(["GIG","CLI","PM","WRK"])
                         .range(["blue","purple","cyan","blueviolet"]);
                         
       //helper scale to map edge type to hue
       var edgeMap = d3.scale.ordinal()
                        .domain(["COM","PAY","COD"])
                        .range([70,150,250]);
                        
       //helper scale to map capacity to lightness                 
       var colInvert = d3.scale.linear()
                               .domain([0,1])
                               .range([0,100]);
                               
       /* maps edge type and capacity to a color value
        * should be changed to map type to color
        * and capacity to stroke-width 
        */        
       function edge2Col(d){
           var l = colInvert(d.data.capacity),
               h = edgeMap(d.data.type);               
            return d3.hcl(h,100,l).rgb()
        };
        /*utility function to convert objects to array
         *allows for d3 to display an object automatically
         */
       function obj2Array(d){
        var result = [];
        for (key in d){
            result.push([key,d[key]]);
        }
        return result;
       }       
       /*
        *
        */
       d3.json("/public/data/testGig.json",function(error,graph){
         if (error) throw error
         
         var nodes = graph.nodes,
             forceLinks = graph.links,
             links = [];
         //create the visible links from forceLinks    
            forceLinks.forEach(function(link){
              var s = nodes[link.source],
                  t = nodes[link.target],
                  i = {}; //dummy node
              nodes.push(i);
              forceLinks.push({source : s, target : i},
                              {source : i, target : t});
              links.push({data : link.data, 
                          source : s, 
                          dummy : i, 
                          target : t});
            });              
             
         
         var link = svg.selectAll(".link")
                      .data(links)
                      .enter()
                      .append("svg:path")
                      .attr('class','link')
                      .attr('stroke',function(d){
                      return edge2Col(d);//color each edge by its type
                      })
                      .attr('stroke-width','3px')
                      .attr("fill","transparent");
                      
          var node = svg.selectAll(".node")
                       .data(nodes.filter(function(d){
                            return d.data;})) //filter out the dummy nodes so they aren't displayed
                       .enter()
                       .append('circle')
                       .attr('class','node')
                       .attr('r',rad)
                       /*this changes the color of the node based on its role
                        * so PM is a dark blue, client is light blue, etc
                        */
                       .attr('fill',function(d){
                       return nodeMap(d.data.type);
                       });
                       
          var force = d3.layout.force()
                     .size([w,h])
                     .nodes(nodes)
                     .links(forceLinks) //simulation uses hidden edges
                     .linkDistance(linkDist)
                     .charge(-600)
                     .gravity(0.8)
                     .friction(0.3)
                     .on('tick',ticked)
                     .on('end',finish);
                     
          force.start();
          
          /*moves the nodes to their new locations
           *and redraws the paths
           */
          function ticked(){
             node.attr("transform",function(d){
                 return "translate(" + d.x + "," + d.y + ")";
             });

             link.attr("d",function(d) {
                return "M" + d.source.x + "," + d.source.y
                       + "Q" + d.dummy.x + "," + d.dummy.y
                     + " " + d.target.x + "," + d.target.y;                    
                     }); 
          };
          
          /*sets up the interface once the simulation is finished
           *
           */
          function finish(){
              node.on("mouseover",handleMouseOver)
                  .on("mouseout",handleMouseOut)
                  .on("click",displayData(nodeFn));
            
              link.on("mouseover",handleMouseOver)
                  .on("mouseout",handleMouseOut)
                  .on("click",displayData(edgeFn));
              
          };
          function handleMouseOver(d,i){
            d3.select(this)
              .attr("stroke-width",strokeWidth*2 + "px");
            
        };
          function handleMouseOut(d,i){
            d3.select(this)
              .attr("stroke-width",strokeWidth + "px");
          };
          /*the callback is used for any computation on the data
           * such as the margin for the gig
           * then all the data is displayed in the sidebar
           */           
          function displayData(callback){
              return function(d,i){
                   sidebar.selectAll('li')
                          .remove();
                    sidebar.select("ul")
                           .selectAll('li')
                           .data(obj2Array(callback(d)))
                           .enter()
                           .append('li')
                           .append('p')
                           .text(function(e){
                               return e[0] + ":" + e[1];
                           });
            };
          };            
            });       